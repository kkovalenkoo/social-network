{"version":3,"sources":["components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Navbar/Navbar.module.css","api/api.ts","redux/profileReducer.tsx","redux/dialogsReducer.tsx","redux/usersReducer.tsx","redux/authReducer.tsx","redux/appReducer.tsx","redux/redux-store.ts","components/Navbar/Navbar.tsx","photos/userPhoto.png","components/Users/Users.tsx","loader/Spinner.svg","components/commonComponents/Preloader.tsx","hoc/withAuthRedirect.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","utils/validators/validators.ts","components/commonComponents/ImprovisedForm/ImprovisedForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","redux/profileSelectors.ts","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessageAuthor/MessageAuthor.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/commonComponents/ImprovisedForm/ImprovisedForm.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","initialState","postsData","id","avatar","like","profile","setStatus","type","messageAuthor","name","messages","message","users","totalUsersCount","isFetching","followingInProgress","followSuccess","UserId","unfollowSuccess","setCurrentPage","toggleIsFetching","toggleFollowingProgress","login","isAuth","setAuthUserData","payload","getAuthUserData","dispatch","resultCode","initialized","rootReducers","combineReducers","profileReducer","state","action","newPost","newPostText","dialogsReducer","newMessage","newMessageText","usersReducer","map","u","followed","count","filter","authReducer","appReducer","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","Navbar","className","s","navbar","item","to","activeClassName","active","Users","props","pagesCount","Math","ceil","pages","i","push","p","index","onClick","onPageChange","style","selected","src","photos","small","large","userPhoto","disabled","some","unfollow","follow","Preloader","preloader","mapStateToPropsForRedirect","auth","withAuthRedirect","Component","connect","restProps","UsersContainer","pageNumber","getUsers","this","React","compose","items","totalCount","ProfileStatus","useState","editMode","setEditMode","onDoubleClick","onChange","e","currentTarget","value","onBlur","autoFocus","ProfileInfo","profileInfoBlock","Post","postBlock","alt","requiredField","maxLengthCreator","maxLength","length","Textarea","input","meta","hasError","touched","error","improveFrom","Input","AddNewPostReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","MyPostsContainer","addPost","addPostAC","mapProfileData","myPostsBlock","Profile","getUserStatus","getIsAuth","getId","ProfileContainer","match","params","String","history","getUserProfile","withRouter","Header","header","loginBlock","logout","HeaderContainer","a","Message","MessageAuthor","maxLength10","AddMessageReduxForm","sendMessage","addMessageAC","mapUsers","d","mapMessages","m","dialogs","dialogItem","LoginReduxForm","formSummaryError","res","stopSubmit","_error","formData","App","initializeApp","path","render","exact","DialogsContainer","promise","Promise","all","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.554b5c49.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Users_selected__csZFT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__1AbAV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"MyPosts_myPostsBlock__Q5uU1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__YyqeU\",\"item\":\"Navbar_item__2Gtbu\",\"active\":\"Navbar_active__5355K\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(\r\n            response => response.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`);\r\n    },\r\n    getProfile(userId: string) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/${userId}`);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n};","import {Dispatch} from 'redux';\r\nimport {profileAPI, usersAPI} from '../api/api';\r\n\r\nexport type ProfileReducerAC =\r\n    ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\nexport type InitialStateProfileReducerType = typeof initialState\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            avatar: 'https://ss.sport-express.ru/userfiles/materials/156/1564657/large.jpg',\r\n            post: `It's my first post`,\r\n            like: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            avatar: `https://ss.sport-express.ru/userfiles/materials/156/1564657/large.jpg`,\r\n            post: 'Hello, how are you',\r\n            like: 5\r\n        }\r\n    ],\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n};\r\n\r\nexport const profileReducer = (state: InitialStateProfileReducerType = initialState, action: ProfileReducerAC): InitialStateProfileReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST': {\r\n            const newPost = {id: 3, avatar: '', post: action.newPostText, like: 0};\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            };\r\n        }\r\n        case 'SET-USER-PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case 'SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addPostAC = (newPostText: string) => ({\r\n    type: 'ADD-POST', newPostText\r\n} as const);\r\nexport const setUserProfile = (profile: ProfileType | null) => ({\r\n    type: 'SET-USER-PROFILE',\r\n    profile\r\n} as const);\r\nexport const setStatus = (status: string) => ({\r\n    type: 'SET-STATUS',\r\n    status\r\n} as const);\r\n\r\nexport const getUserProfile = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId).then(response => {\r\n            dispatch(setUserProfile(response.data));\r\n        });\r\n    };\r\n};\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data));\r\n        });\r\n    };\r\n};\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n        });\r\n    };\r\n};","export type DialogsReducerAC = ReturnType<typeof addMessageAC>\r\n\r\nexport type InitialStateDialogsDataType = typeof initialState\r\n\r\nconst initialState = {\r\n    messageAuthor: [\r\n        {id: 1, name: 'Yury'},\r\n        {id: 2, name: 'Sergey'},\r\n        {id: 3, name: 'Sasha'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'Yo'}\r\n    ],\r\n};\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsDataType = initialState, action: DialogsReducerAC): InitialStateDialogsDataType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE': {\r\n            const newMessage = action.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: newMessage}]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addMessageAC = (newMessageText: string) => ({\r\n    type: 'ADD-MESSAGE', newMessageText\r\n} as const);\r\n","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../api/api';\r\n\r\nexport type UserReducerAC =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\ntype PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotoType\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\nexport type InitialStateUsersReducerType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 2,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n};\r\n\r\nexport const usersReducer = (state: InitialStateUsersReducerType = initialState, action: UserReducerAC): InitialStateUsersReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.UserId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case 'UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.UserId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case 'SET-USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        }\r\n        case 'SET-TOTAL-USERS-COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            };\r\n        }\r\n        case 'TOGGLE-IS-FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        }\r\n        case 'FOLLOWING-IN-PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const followSuccess = (UserId: number) => ({type: 'FOLLOW', UserId} as const);\r\nexport const unfollowSuccess = (UserId: number) => ({type: 'UNFOLLOW', UserId} as const);\r\nexport const setUsers = (users: Array<UserType>) => ({type: 'SET-USERS', users} as const);\r\nexport const setCurrentPage = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const);\r\nexport const setTotalUsersCount = (count: number) => ({type: 'SET-TOTAL-USERS-COUNT', count} as const);\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: 'TOGGLE-IS-FETCHING', isFetching} as const);\r\nexport const toggleFollowingProgress = (id: number, followingInProgress: boolean) => ({\r\n    type: 'FOLLOWING-IN-PROGRESS',\r\n    id,\r\n    followingInProgress\r\n} as const);\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        dispatch(setCurrentPage(currentPage))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersCount(data.totalCount));\r\n        });\r\n    };\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(userId, true))\r\n        usersAPI.follow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(userId, false))\r\n        });\r\n\r\n    };\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(userId, true))\r\n        usersAPI.unfollow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(userId, false))\r\n        });\r\n\r\n    };\r\n};","import {authAPI} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppThunk} from './redux-store'\r\nimport {stopSubmit} from 'redux-form'\r\n\r\nexport type AuthReducerAC = ReturnType<typeof setAuthUserData>\r\n\r\nexport type InitialStateAuthReducerType = {\r\n    isAuth: boolean,\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null\r\n}\r\n\r\nconst initialState: InitialStateAuthReducerType = {\r\n    id: null,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: AuthReducerAC): InitialStateAuthReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (id: number | null,\r\n                                login: string | null,\r\n                                email: string | null,\r\n                                isAuth: boolean) => ({\r\n    type: 'SET-USER-DATA',\r\n    payload: {id, login, email, isAuth}\r\n} as const)\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    return authAPI.me().then(\r\n        response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data\r\n                dispatch(setAuthUserData(id, login, email, true))\r\n            }\r\n        })\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunk =>\r\n    async (dispatch: any) => {\r\n        const res = await authAPI.login(email, password, rememberMe)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            const message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n    }\r\n\r\nexport const logout = (): AppThunk =>\r\n    async dispatch => {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n\r\n","import {getAuthUserData} from './authReducer'\r\nimport {AllStateType, AppActionsType} from './redux-store'\r\nimport {ThunkDispatch} from 'redux-thunk'\r\n\r\nexport type AppReducerAC = ReturnType<typeof initializedSuccess>\r\n\r\nexport type InitialStateAppReducerType = {\r\n    initialized: boolean,\r\n}\r\n\r\nconst initialState: InitialStateAppReducerType = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppReducerAC): InitialStateAppReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'INITIALIZED-SUCCESS': {\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nconst initializedSuccess = () => ({\r\n    type: 'INITIALIZED-SUCCESS'\r\n} as const)\r\n\r\n//Thunk\r\nexport const initializeApp = () => (dispatch: ThunkDispatch<AllStateType, void, AppActionsType>) => {\r\n    const promise = dispatch(getAuthUserData())\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess())\r\n        })\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {profileReducer, ProfileReducerAC} from './profileReducer'\r\nimport {dialogsReducer, DialogsReducerAC} from './dialogsReducer'\r\nimport {usersReducer} from './usersReducer'\r\nimport {authReducer, AuthReducerAC} from './authReducer'\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport {appReducer, AppReducerAC} from './appReducer'\r\n\r\nconst rootReducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    appReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers\r\n\r\nexport type AllStateType = ReturnType<RootReducersType>\r\n\r\nexport type AppActionsType = AuthReducerAC | ProfileReducerAC | DialogsReducerAC | AppReducerAC\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AllStateType, unknown, AppActionsType>\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Navbar.module.css';\n\nexport function Navbar() {\n    return (\n        <nav className={s.navbar}>\n            <div className={s.item}>\n                <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\n                {/*по умоланию у NavLink есть класс active, но т.к. используется module.css, то activeClassName мы устанавливаем свой active*/}\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.active}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.active}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\n            </div>\n        </nav>\n    );\n}\n\n","export default __webpack_public_path__ + \"static/media/userPhoto.22c31152.png\";","import style from './Users.module.css';\r\nimport userPhoto from '../../photos/userPhoto.png';\r\nimport React from 'react';\r\nimport {UserType} from '../../redux/usersReducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    users: Array<UserType>\r\n    onPageChange: (pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport function Users(props: UsersPropsType) {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map((p, index) =>\r\n                        <span key={index}\r\n                              onClick={() => {\r\n                                  props.onPageChange(p);\r\n                              }}\r\n                              className={props.currentPage === p ? style.selected : ''}>{p}\r\n                            </span>)\r\n                }\r\n            </div>\r\n            {props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <NavLink to={`/profile/${u.id}`}>\r\n                        <div>\r\n                        <img src={u.photos.small ? u.photos.small : u.photos.large ? u.photos.large : userPhoto}/>\r\n                    </div>\r\n                    </NavLink>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={ () => {props.unfollow(u.id)} }>Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/Spinner.9471d726.svg\";","import preloader from '../../loader/Spinner.svg';\r\nimport React from 'react';\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AllStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\nimport {MapStateToPropsForRedirect} from '../components/Profile/ProfileContainer';\r\n\r\nconst mapStateToPropsForRedirect = (state: AllStateType): MapStateToPropsForRedirect => {\r\n    return {\r\n        auth: state.authReducer.isAuth\r\n    };\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStateToPropsForRedirect) {\r\n\r\n        let {auth, ...restProps} = props\r\n\r\n        if (!auth) return <Redirect to={'/login'}/>;\r\n        return <Component {...restProps as T}/>;\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n};","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AllStateType} from '../../redux/redux-store';\r\nimport {\r\n    follow,\r\n    followSuccess,\r\n    getUsers,\r\n    InitialStateUsersReducerType,\r\n    setCurrentPage,\r\n    toggleFollowingProgress, unfollow,\r\n    unfollowSuccess\r\n} from '../../redux/usersReducer';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../commonComponents/Preloader';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\nexport class UsersContainer extends React.Component<MapStateAndDispatchPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.state.currentPage, this.props.state.pageSize);\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.state.pageSize);\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.state.isFetching ? <Preloader/> : null}\r\n            <Users currentPage={this.props.state.currentPage}\r\n                   totalUsersCount={this.props.state.totalUsersCount}\r\n                   pageSize={this.props.state.pageSize}\r\n                   users={this.props.state.users}\r\n                   onPageChange={this.onPageChange}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.state.followingInProgress}\r\n            /></>;\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    state: InitialStateUsersReducerType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (UserId: number) => void\r\n    unfollow: (UserId: number) => void\r\n    followSuccess: (UserId: number) => void\r\n    unfollowSuccess: (UserId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleFollowingProgress: (id: number, value: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\r\n    return {\r\n        state: state.usersReducer,\r\n    };\r\n};\r\n\r\n/*const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(follow(userId));\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollow(userId));\r\n        },\r\n        setUsers: (users: Array<UserType>) => {\r\n            dispatch(setUsers(users));\r\n        },\r\n        setCurrentPage: (currentPage: number) => {\r\n            dispatch(setCurrentPage(currentPage));\r\n        },\r\n        setTotalUsersCount: (count: number) => {\r\n            dispatch(setTotalUsersCount(count));\r\n        },\r\n        toggleIsFetching: (isFetching: boolean) => {\r\n            dispatch(toggleIsFetching(isFetching))\r\n        }\r\n    };\r\n};*/\r\n\r\nexport default compose<ComponentType>(\r\n    connect(\r\n        mapStateToProps,\r\n        {\r\n            follow, unfollow, followSuccess, unfollowSuccess,\r\n            setCurrentPage, toggleFollowingProgress, getUsers\r\n        }),\r\n    withAuthRedirect\r\n)(UsersContainer);","import React, {ChangeEvent, useState} from 'react'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    const activateEditMode = () => setEditMode(true)\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => setStatus(e.currentTarget.value)\r\n\r\n    // componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n    //     if (prevProps.status !== this.props.status){\r\n    //         this.setState({\r\n    //             status: this.props.status\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode && <div><span onDoubleClick={activateEditMode}>{props.status || '-----'}</span></div>}\r\n            {editMode && <div><input onChange={onChangeStatus}\r\n                                     value={status}\r\n                                     onBlur={deactivateEditMode}\r\n                                     autoFocus={true}/></div>}\r\n        </div>\r\n    )\r\n}","import React from 'react'\nimport s from './ProfileInfo.module.css'\nimport {ProfileType} from '../../../redux/profileReducer'\nimport {Preloader} from '../../commonComponents/Preloader'\nimport {ProfileStatus} from './ProfileStatus'\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport function ProfileInfo(props: ProfileInfoPropsType) {\n\n    if (!props.profile) {\n        return <Preloader/>;\n    }\n    return (\n        <div>\n            <img src=\"https://img.gazeta.ru/files3/173/6408173/1ca3f5-pic700-700x467-84454.jpg\"/>\n            <div className={s.profileInfoBlock}>\n                <img src={props.profile.photos.large !== null ? props.profile.photos.large : ''}/>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport s from './Post.module.css';\n\ntype PostPropsType = {\n    post: string\n    like: number\n    avatar: string\n}\n\nexport function Post(props: PostPropsType) {\n    return (\n        <div className={s.postBlock}>\n            <img className={s.avatar}\n                 src={props.avatar}\n                 alt=\"avatar\"/>\n            <span>{props.post}</span>\n            <div>\n                <span>likes {props.like}</span>\n            </div>\n        </div>\n    );\n}\n\n","export const requiredField = (value: string) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './ImprovisedForm.module.css'\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.improveFrom} ${hasError ? s.error : ''}`}>\r\n            <textarea {...input} {...restProps}/>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.improveFrom} ${hasError ? s.error : ''}`}>\r\n            <input {...input} {...restProps}/>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Post} from './Post/Post';\nimport s from './MyPosts.module.css';\nimport {MapStateAndDispatchPropsType} from './MyPostsContainer';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../commonComponents/ImprovisedForm/ImprovisedForm\";\n\nexport function MyPosts(props: MapStateAndDispatchPropsType) {\n\n    const onAddPost = (value: FormDataType) => {\n        props.addPost(value.newPostText);\n    };\n\n    const mapProfileData = props.state.postsData.map(p => <Post key={p.id}\n                                                                post={p.post}\n                                                                like={p.like}\n                                                                avatar={p.avatar}/>);\n    return (\n        <div>\n            <div className={s.myPostsBlock}>\n                <h3>My posts</h3>\n                <AddNewPostReduxForm onSubmit={onAddPost}/>\n            </div>\n            <div>\n                {mapProfileData}\n            </div>\n        </div>\n    );\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength = maxLengthCreator(5)\n\nfunction AddNewPostForm(props:InjectedFormProps<FormDataType>) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}\n                   name={'newPostText'}\n                   placeholder={'Enter new post'}\n                   validate={[requiredField, maxLength]}/>\n            <div>\n                <button>Add Post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\n\n","import React from 'react';\nimport {AllStateType} from '../../../redux/redux-store';\nimport {addPostAC, InitialStateProfileReducerType} from '../../../redux/profileReducer';\nimport {MyPosts} from './MyPosts';\nimport {connect} from 'react-redux';\nimport {Dispatch} from 'redux';\n\ntype MapStateToPropsType = {\n    state: InitialStateProfileReducerType\n}\ntype MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\n    return {\n        state: state.profileReducer\n    };\n};\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText));\n        }\n    };\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n","import React from 'react';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {ProfileType} from '../../redux/profileReducer';\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport function Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\n","import {AllStateType} from './redux-store'\r\n\r\nexport const getProfile = (state: AllStateType) => {\r\n    return state.profileReducer.profile\r\n}\r\nexport const getUserStatus = (state: AllStateType) => {\r\n    return state.profileReducer.status\r\n}\r\nexport const getIsAuth = (state: AllStateType) => {\r\n    return state.authReducer.isAuth\r\n}\r\nexport const getId = (state: AllStateType) => {\r\n    return state.authReducer.id\r\n}","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profileReducer';\r\nimport {AllStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {getId, getIsAuth, getProfile, getUserStatus} from '../../redux/profileSelectors'\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    isAuth: boolean\r\n    id: number | null\r\n}\r\nexport type MapStateToPropsForRedirect = {\r\n    auth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapStateToPropsForRedirect & MapDispatchToPropsType\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamType> & MapStateAndDispatchPropsType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = String(this.props.id);\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: getProfile(state),\r\n        status: getUserStatus(state),\r\n        isAuth: getIsAuth(state),\r\n        id: getId(state)\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(\r\n        mapStateToProps,\r\n        {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Header.module.css'\nimport {} from '../../redux/authReducer';\n\ntype HeaderType = {\n    login: string | null\n    isAuth: boolean\n    logout: () => void\n}\n\nexport function Header(props: HeaderType) {\n\n        return (\n            <header className={s.header}>\n                <img\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTZzxV0K3qxDgsnn7LxcALK59V99QMj_veKIw&usqp=CAU\"\n                    alt=\"logo\"/>\n                <div className={s.loginBlock}>\n\n                    {props.isAuth ? <div>{props.login} <button onClick={props.logout}>Log out</button></div> : <NavLink to=\"/login\">Login</NavLink>}\n                </div>\n            </header>\n    );\n}\n\n","import React from 'react'\nimport {Header} from './Header'\nimport {connect} from 'react-redux'\nimport {logout} from '../../redux/authReducer'\nimport {AllStateType} from '../../redux/redux-store'\n\nclass HeaderContainer extends React.Component<mapStateAndDispatchPropsType> {\n\n    render() {\n        return (\n            <Header login={this.props.login} isAuth={this.props.isAuth} logout={this.props.logout}/>\n        )\n    }\n}\n\ntype mapStateToPropsType = {\n    login: string | null\n    isAuth: boolean\n}\ntype mapDispatchToPropsType = {\n    logout: () => void\n}\ntype mapStateAndDispatchPropsType = mapStateToPropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: AllStateType): mapStateToPropsType => ({\n    login: state.authReducer.login,\n    isAuth: state.authReducer.isAuth\n})\n\nexport default connect(mapStateToProps, {logout})(HeaderContainer)\n\n","type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n    return (\r\n        <div>{props.message}</div>\r\n    );\r\n}","import {NavLink} from 'react-router-dom';\r\n\r\ntype UserPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport function MessageAuthor(props: UserPropsType) {\r\n    return (\r\n        <div>\r\n            <NavLink to={`/dialogs/1 ${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}","import s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {MessageAuthor} from './MessageAuthor/MessageAuthor';\r\nimport React from 'react';\r\nimport {MapStateAndDispatchPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../commonComponents/ImprovisedForm/ImprovisedForm\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\nexport function Dialogs(props: MapStateAndDispatchPropsType) {\r\n\r\n    const mapUsers = props.state.messageAuthor.map(d => <MessageAuthor key={d.id} id={d.id} name={d.name}/>);\r\n    const mapMessages = props.state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    const addNewMessage = (value: FormDataType) => {\r\n        props.sendMessage(value.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {mapUsers}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {mapMessages}\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nfunction AddMessageForm(props: InjectedFormProps<FormDataType>) {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[requiredField, maxLength10]}\r\n                       name={'newMessageText'}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {addMessageAC, InitialStateDialogsDataType} from '../../redux/dialogsReducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AllStateType} from '../../redux/redux-store';\r\nimport React from 'react';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    state: InitialStateDialogsDataType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\r\n    return {\r\n        state: state.dialogsReducer,\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(addMessageAC(newMessageText));\r\n        }\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport React from 'react'\r\nimport {Input} from '../commonComponents/ImprovisedForm/ImprovisedForm'\r\nimport {requiredField} from '../../utils/validators/validators'\r\nimport {connect} from 'react-redux'\r\nimport {InitialStateAuthReducerType, login} from '../../redux/authReducer'\r\nimport {AllStateType} from '../../redux/redux-store'\r\nimport {Redirect} from 'react-router-dom'\r\nimport style from './../commonComponents/ImprovisedForm/ImprovisedForm.module.css'\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nfunction LoginForm(props: InjectedFormProps<FormDataType>) {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'} name={'email'} component={Input} validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'} name={'password'} component={Input} validate={[requiredField]}\r\n                       type={'password'}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            {props.error && <div className={style.formSummaryError}>{props.error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst Login = (props: mapDispatchToProps & mapStateToProps) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe} = formData\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n    if (props.state.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <h3>Email для входа: free@samuraijs.com</h3>\r\n            <h3>Пароль для входа: free</h3>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype mapDispatchToProps = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype mapStateToProps = {\r\n    state: InitialStateAuthReducerType\r\n}\r\n\r\nconst mapStateToProps = (state: AllStateType): mapStateToProps => ({\r\n    state: state.authReducer\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import React from 'react'\nimport './App.css'\nimport {Navbar} from './components/Navbar/Navbar'\nimport {Route} from 'react-router-dom'\nimport UsersContainer from './components/Users/UsersContainer'\nimport ProfileContainer from './components/Profile/ProfileContainer'\nimport HeaderContainer from './components/Header/HeaderContainer'\nimport DialogsContainer from './components/Dialogs/DialogsContainer'\nimport Login from './components/Login/Login'\nimport {connect} from 'react-redux'\nimport {compose} from 'redux'\nimport {withRouter} from 'react-router'\nimport {initializeApp} from './redux/appReducer'\nimport {AllStateType} from './redux/redux-store'\nimport {Preloader} from './components/commonComponents/Preloader'\n\n\nclass App extends React.Component<mapStateAndDispatchToProps> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n        return (\n            <div className=\"app-wrapper\">\n                <HeaderContainer/>\n                <Navbar/>\n                <div className=\"app-wrapper-content\">\n                    <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\n                    <Route exact path=\"/dialogs\" render={() => <DialogsContainer/>}/>\n                    <Route exact path=\"/users\" render={() => <UsersContainer/>}/>\n                    <Route exact path=\"/login\" render={() => <Login/>}/>\n                </div>\n            </div>\n        )\n    }\n}\n\ntype mapStateToPropsType = {\n    initialized: boolean\n}\ntype mapDispatchToPropsType = {\n    initializeApp: () => void\n}\ntype mapStateAndDispatchToProps = mapStateToPropsType & mapDispatchToPropsType\n\nconst mapStateToPropsType = (state: AllStateType): mapStateToPropsType => ({\n    initialized: state.appReducer.initialized\n})\n\nexport default compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToPropsType, {initializeApp}))(App)\n","import React from 'react'\nimport './index.css'\nimport {store} from './redux/redux-store'\nimport ReactDOM from 'react-dom'\nimport {HashRouter} from 'react-router-dom'\nimport {Provider} from 'react-redux'\nimport App from './App'\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>\n    , document.getElementById('root'))\n\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"improveFrom\":\"ImprovisedForm_improveFrom__xrCmP\",\"error\":\"ImprovisedForm_error__8SEUr\",\"formSummaryError\":\"ImprovisedForm_formSummaryError__hpw75\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1iM1m\",\"dialogItem\":\"Dialogs_dialogItem__1rHpo\",\"messages\":\"Dialogs_messages__3F8ay\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"Post_postBlock__2fYK3\",\"avatar\":\"Post_avatar__2Il9-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__zBrnA\",\"loginBlock\":\"Header_loginBlock__2tK49\"};"],"sourceRoot":""}