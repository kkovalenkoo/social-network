{"version":3,"sources":["components/Users/Users.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Navbar/Navbar.module.css","api/api.ts","redux/profileReducer.tsx","redux/dialogsReducer.tsx","redux/usersReducer.tsx","redux/authReducer.tsx","redux/redux-store.ts","components/Navbar/Navbar.tsx","photos/userPhoto.png","components/Users/Users.tsx","loader/Spinner.svg","components/commonComponents/Preloader.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","utils/validators/validators.ts","components/commonComponents/ImprovisedForm/ImprovisedForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessageAuthor/MessageAuthor.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/commonComponents/ImprovisedForm/ImprovisedForm.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","initialState","postsData","id","avatar","like","profile","setStatus","type","messageAuthor","name","messages","message","users","totalUsersCount","isFetching","followingInProgress","followSuccess","UserId","unfollowSuccess","toggleIsFetching","toggleFollowingProgress","login","isAuth","setAuthUserData","payload","getAuthUserData","dispatch","resultCode","rootReducers","combineReducers","profileReducer","state","action","newPost","newPostText","dialogsReducer","newMessage","newMessageText","usersReducer","map","u","followed","count","filter","authReducer","form","formReducer","store","createStore","applyMiddleware","thunkMiddleware","Navbar","className","s","navbar","item","to","activeClassName","active","Users","props","pagesCount","Math","ceil","pages","i","push","p","index","onClick","onPageChange","style","selected","src","photos","small","large","userPhoto","disabled","some","unfollow","follow","Preloader","preloader","UsersContainer","pageNumber","getUsers","this","React","Component","compose","connect","setCurrentPage","items","totalCount","ProfileStatus","editMode","activateEditMode","setState","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","onDoubleClick","onChange","onBlur","deactivateEditMode","bind","autoFocus","ProfileInfo","profileInfoBlock","Post","postBlock","alt","requiredField","maxLengthCreator","maxLength","length","Textarea","input","meta","restProps","hasError","touched","error","improveFrom","Input","AddNewPostReduxForm","reduxForm","onSubmit","handleSubmit","Field","component","placeholder","validate","MyPostsContainer","addPost","addPostAC","mapProfileData","myPostsBlock","Profile","ProfileContainer","match","params","getUserProfile","withRouter","Header","header","loginBlock","logout","HeaderContainer","a","Message","MessageAuthor","maxLength10","AddMessageReduxForm","sendMessage","addMessageAC","mapUsers","d","mapMessages","m","dialogs","dialogItem","LoginReduxForm","formData","App","path","render","exact","DialogsContainer","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.571feb3e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"Users_selected__pglDp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoBlock\":\"ProfileInfo_profileInfoBlock__2NhI9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPostsBlock\":\"MyPosts_myPostsBlock__3aFEZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"Navbar_navbar__Dfr6O\",\"item\":\"Navbar_item__2CRpR\",\"active\":\"Navbar_active__3GLIu\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n});\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`).then(\r\n            response => response.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`);\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`);\r\n    },\r\n    getProfile(userId: string) {\r\n        return profileAPI.getProfile(userId)\r\n    }\r\n};\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/${userId}`);\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get(`profile/status/${userId}`);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status`, {status: status});\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`);\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/login')\r\n    }\r\n};","import {Dispatch} from 'redux';\r\nimport {profileAPI, usersAPI} from '../api/api';\r\n\r\nexport type ProfileReducerAC =\r\n    ReturnType<typeof addPostAC>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\nexport type InitialStateProfileReducerType = typeof initialState\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk: string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nconst initialState = {\r\n    postsData: [\r\n        {\r\n            id: 1,\r\n            avatar: 'https://ss.sport-express.ru/userfiles/materials/156/1564657/large.jpg',\r\n            post: `It's my first post`,\r\n            like: 10\r\n        },\r\n        {\r\n            id: 2,\r\n            avatar: `https://ss.sport-express.ru/userfiles/materials/156/1564657/large.jpg`,\r\n            post: 'Hello, how are you',\r\n            like: 5\r\n        }\r\n    ],\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n};\r\n\r\nexport const profileReducer = (state: InitialStateProfileReducerType = initialState, action: ProfileReducerAC): InitialStateProfileReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-POST': {\r\n            const newPost = {id: 3, avatar: '', post: action.newPostText, like: 0};\r\n            return {\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            };\r\n        }\r\n        case 'SET-USER-PROFILE': {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        }\r\n        case 'SET-STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addPostAC = (newPostText: string) => ({\r\n    type: 'ADD-POST', newPostText\r\n} as const);\r\nexport const setUserProfile = (profile: ProfileType | null) => ({\r\n    type: 'SET-USER-PROFILE',\r\n    profile\r\n} as const);\r\nexport const setStatus = (status: string) => ({\r\n    type: 'SET-STATUS',\r\n    status\r\n} as const);\r\n\r\nexport const getUserProfile = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId).then(response => {\r\n            dispatch(setUserProfile(response.data));\r\n        });\r\n    };\r\n};\r\nexport const getStatus = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId).then(response => {\r\n            dispatch(setStatus(response.data));\r\n        });\r\n    };\r\n};\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setStatus(status));\r\n            }\r\n        });\r\n    };\r\n};","export type DialogsReducerAC = ReturnType<typeof addMessageAC>\r\n\r\nexport type InitialStateDialogsDataType = typeof initialState\r\n\r\nconst initialState = {\r\n    messageAuthor: [\r\n        {id: 1, name: 'Yury'},\r\n        {id: 2, name: 'Sergey'},\r\n        {id: 3, name: 'Sasha'}\r\n    ],\r\n    messages: [\r\n        {id: 1, message: 'Hello'},\r\n        {id: 2, message: 'Hi'},\r\n        {id: 3, message: 'Yo'}\r\n    ],\r\n};\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsDataType = initialState, action: DialogsReducerAC): InitialStateDialogsDataType => {\r\n\r\n    switch (action.type) {\r\n        case 'ADD-MESSAGE': {\r\n            const newMessage = action.newMessageText;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 4, message: newMessage}]\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const addMessageAC = (newMessageText: string) => ({\r\n    type: 'ADD-MESSAGE', newMessageText\r\n} as const);\r\n","import {Dispatch} from 'redux';\r\nimport {usersAPI} from '../api/api';\r\n\r\nexport type UserReducerAC =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFetching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\ntype PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\nexport type UserType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: string\r\n    photos: PhotoType\r\n    status: string\r\n    followed: boolean\r\n}\r\n\r\nexport type InitialStateUsersReducerType = typeof initialState\r\n\r\nconst initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 20,\r\n    totalUsersCount: 0,\r\n    currentPage: 2,\r\n    isFetching: false,\r\n    followingInProgress: [] as number[]\r\n};\r\n\r\nexport const usersReducer = (state: InitialStateUsersReducerType = initialState, action: UserReducerAC): InitialStateUsersReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'FOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.UserId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case 'UNFOLLOW': {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.UserId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            };\r\n        }\r\n        case 'SET-USERS': {\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            };\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return {\r\n                ...state,\r\n                currentPage: action.currentPage\r\n            };\r\n        }\r\n        case 'SET-TOTAL-USERS-COUNT': {\r\n            return {\r\n                ...state,\r\n                totalUsersCount: action.count\r\n            };\r\n        }\r\n        case 'TOGGLE-IS-FETCHING': {\r\n            return {\r\n                ...state,\r\n                isFetching: action.isFetching\r\n            };\r\n        }\r\n        case 'FOLLOWING-IN-PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.followingInProgress\r\n                    ? [...state.followingInProgress, action.id]\r\n                    : state.followingInProgress.filter(id => id !== action.id)\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const followSuccess = (UserId: number) => ({type: 'FOLLOW', UserId} as const);\r\nexport const unfollowSuccess = (UserId: number) => ({type: 'UNFOLLOW', UserId} as const);\r\nexport const setUsers = (users: Array<UserType>) => ({type: 'SET-USERS', users} as const);\r\nexport const setCurrentPage = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const);\r\nexport const setTotalUsersCount = (count: number) => ({type: 'SET-TOTAL-USERS-COUNT', count} as const);\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: 'TOGGLE-IS-FETCHING', isFetching} as const);\r\nexport const toggleFollowingProgress = (id: number, followingInProgress: boolean) => ({\r\n    type: 'FOLLOWING-IN-PROGRESS',\r\n    id,\r\n    followingInProgress\r\n} as const);\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true));\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false));\r\n            dispatch(setUsers(data.items));\r\n            dispatch(setTotalUsersCount(data.totalCount));\r\n        });\r\n    };\r\n};\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(userId, true))\r\n        usersAPI.follow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(followSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(userId, false))\r\n        });\r\n\r\n    };\r\n};\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(userId, true))\r\n        usersAPI.unfollow(userId).then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(unfollowSuccess(userId))\r\n            }\r\n            dispatch(toggleFollowingProgress(userId, false))\r\n        });\r\n\r\n    };\r\n};","import {authAPI} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\nimport {AppThunk} from \"./redux-store\";\r\n\r\nexport type AuthReducerAC = ReturnType<typeof setAuthUserData>\r\n\r\nexport type InitialStateAuthReducerType = {\r\n    isAuth: boolean,\r\n    id: number | null,\r\n    email: string | null,\r\n    login: string | null\r\n}\r\n\r\nconst initialState: InitialStateAuthReducerType = {\r\n    id: null,\r\n    email: '',\r\n    login: '',\r\n    isAuth: false\r\n};\r\n\r\nexport const authReducer = (state = initialState, action: AuthReducerAC): InitialStateAuthReducerType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-USER-DATA': {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setAuthUserData = (id: number | null,\r\n                                login: string | null,\r\n                                email: string | null,\r\n                                isAuth: boolean) => ({\r\n    type: 'SET-USER-DATA',\r\n    payload: {id, login, email, isAuth}\r\n} as const);\r\n\r\nexport const getAuthUserData = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(\r\n        response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data\r\n                dispatch(setAuthUserData(id, login, email, true))\r\n            }\r\n        });\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean): AppThunk =>\r\n    async dispatch => {\r\n        const res = await authAPI.login(email, password, rememberMe)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        }\r\n    }\r\n\r\nexport const logout = (): AppThunk =>\r\n    async dispatch => {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setAuthUserData(null, null, null, false))\r\n        }\r\n    }\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileReducer, ProfileReducerAC} from './profileReducer';\r\nimport {dialogsReducer, DialogsReducerAC} from './dialogsReducer';\r\nimport {usersReducer} from './usersReducer';\r\nimport {authReducer, AuthReducerAC, setAuthUserData} from './authReducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\r\nimport {reducer as formReducer} from 'redux-form'\r\n\r\nconst rootReducers = combineReducers({\r\n    profileReducer,\r\n    dialogsReducer,\r\n    usersReducer,\r\n    authReducer,\r\n    form: formReducer\r\n});\r\n\r\ntype RootReducersType = typeof rootReducers\r\n\r\nexport type AllStateType = ReturnType<RootReducersType>\r\n\r\nexport type AppActionsType = AuthReducerAC | ProfileReducerAC | DialogsReducerAC\r\n\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AllStateType, unknown, AppActionsType>\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunkMiddleware));","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './Navbar.module.css';\n\nexport function Navbar() {\n    return (\n        <nav className={s.navbar}>\n            <div className={s.item}>\n                <NavLink to='/profile' activeClassName={s.active}>Profile</NavLink>\n                {/*по умоланию у NavLink есть класс active, но т.к. используется module.css, то activeClassName мы устанавливаем свой active*/}\n            </div>\n            <div className={s.item}>\n                <NavLink to='/dialogs' activeClassName={s.active}>Messages</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/news' activeClassName={s.active}>News</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/music' activeClassName={s.active}>Music</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/settings' activeClassName={s.active}>Settings</NavLink>\n            </div>\n            <div className={s.item}>\n                <NavLink to='/users' activeClassName={s.active}>Users</NavLink>\n            </div>\n        </nav>\n    );\n}\n\n","export default __webpack_public_path__ + \"static/media/userPhoto.22c31152.png\";","import style from './Users.module.css';\r\nimport userPhoto from '../../photos/userPhoto.png';\r\nimport React from 'react';\r\nimport {UserType} from '../../redux/usersReducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype UsersPropsType = {\r\n    currentPage: number\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    users: Array<UserType>\r\n    onPageChange: (pageNumber: number) => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: number[]\r\n}\r\n\r\nexport function Users(props: UsersPropsType) {\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map((p, index) =>\r\n                        <span key={index}\r\n                              onClick={() => {\r\n                                  props.onPageChange(p);\r\n                              }}\r\n                              className={props.currentPage === p ? style.selected : ''}>{p}\r\n                            </span>)\r\n                }\r\n            </div>\r\n            {props.users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <NavLink to={`/profile/${u.id}`}>\r\n                        <div>\r\n                        <img src={u.photos.small ? u.photos.small : u.photos.large ? u.photos.large : userPhoto}/>\r\n                    </div>\r\n                    </NavLink>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={ () => {props.unfollow(u.id)} }>Unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some(id => id === u.id)}\r\n                                      onClick={() => {props.follow(u.id)}}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.country'}</div>\r\n                        <div>{'u.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    );\r\n}","export default __webpack_public_path__ + \"static/media/Spinner.9471d726.svg\";","import preloader from '../../loader/Spinner.svg';\r\nimport React from 'react';\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div>\r\n            <img src={preloader}/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {AllStateType} from '../../redux/redux-store';\r\nimport {\r\n    follow,\r\n    followSuccess,\r\n    getUsers,\r\n    InitialStateUsersReducerType,\r\n    setCurrentPage,\r\n    toggleFollowingProgress, unfollow,\r\n    unfollowSuccess\r\n} from '../../redux/usersReducer';\r\nimport {Users} from './Users';\r\nimport {Preloader} from '../commonComponents/Preloader';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\nexport class UsersContainer extends React.Component<MapStateAndDispatchPropsType> {\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.state.currentPage, this.props.state.pageSize);\r\n    }\r\n\r\n    onPageChange = (pageNumber: number) => {\r\n        this.props.getUsers(pageNumber, this.props.state.pageSize);\r\n    };\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.state.isFetching ? <Preloader/> : null}\r\n            <Users currentPage={this.props.state.currentPage}\r\n                   totalUsersCount={this.props.state.totalUsersCount}\r\n                   pageSize={this.props.state.pageSize}\r\n                   users={this.props.state.users}\r\n                   onPageChange={this.onPageChange}\r\n                   follow={this.props.follow}\r\n                   unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.state.followingInProgress}\r\n            /></>;\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    state: InitialStateUsersReducerType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    follow: (UserId: number) => void\r\n    unfollow: (UserId: number) => void\r\n    followSuccess: (UserId: number) => void\r\n    unfollowSuccess: (UserId: number) => void\r\n    setCurrentPage: (currentPage: number) => void\r\n    toggleFollowingProgress: (id: number, value: boolean) => void\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\r\n    return {\r\n        state: state.usersReducer,\r\n    };\r\n};\r\n\r\n/*const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        follow: (userId: number) => {\r\n            dispatch(follow(userId));\r\n        },\r\n        unfollow: (userId: number) => {\r\n            dispatch(unfollow(userId));\r\n        },\r\n        setUsers: (users: Array<UserType>) => {\r\n            dispatch(setUsers(users));\r\n        },\r\n        setCurrentPage: (currentPage: number) => {\r\n            dispatch(setCurrentPage(currentPage));\r\n        },\r\n        setTotalUsersCount: (count: number) => {\r\n            dispatch(setTotalUsersCount(count));\r\n        },\r\n        toggleIsFetching: (isFetching: boolean) => {\r\n            dispatch(toggleIsFetching(isFetching))\r\n        }\r\n    };\r\n};*/\r\n\r\nexport default compose<ComponentType>(\r\n    connect(\r\n        mapStateToProps,\r\n        {\r\n            follow, unfollow, followSuccess, unfollowSuccess,\r\n            setCurrentPage, toggleFollowingProgress, getUsers\r\n        }),\r\n    //withAuthRedirect\r\n)(UsersContainer);","import React, {ChangeEvent, Component} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport class ProfileStatus extends Component<ProfileStatusPropsType> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true,\r\n        });\r\n    };\r\n\r\n    deactivateEditMode() {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n\r\n    onStatusChange = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {\r\n                    !this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || '-----'}</span>\r\n                    </div>\r\n                }\r\n                {\r\n                    this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange}\r\n                               value={this.state.status}\r\n                               onBlur={this.deactivateEditMode.bind(this)}\r\n                               autoFocus={true}\r\n                        />\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport {ProfileType} from '../../../redux/profileReducer';\nimport {Preloader} from '../../commonComponents/Preloader';\nimport {ProfileStatus} from './ProfileStatus';\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport function ProfileInfo(props: ProfileInfoPropsType) {\n\n    if (!props.profile) {\n        return <Preloader/>;\n    }\n    return (\n        <div>\n            <img src=\"https://img.gazeta.ru/files3/173/6408173/1ca3f5-pic700-700x467-84454.jpg\"/>\n            <div className={s.profileInfoBlock}>\n                <img src={props.profile.photos.large !== null ? props.profile.photos.large : ''}/>\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n            </div>\n        </div>\n    );\n}\n\n","import React from 'react';\nimport s from './Post.module.css';\n\ntype PostPropsType = {\n    post: string\n    like: number\n    avatar: string\n}\n\nexport function Post(props: PostPropsType) {\n    return (\n        <div className={s.postBlock}>\n            <img className={s.avatar}\n                 src={props.avatar}\n                 alt=\"avatar\"/>\n            <span>{props.post}</span>\n            <div>\n                <span>likes {props.like}</span>\n            </div>\n        </div>\n    );\n}\n\n","export const requiredField = (value: string) => {\r\n    if(value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from './ImprovisedForm.module.css'\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.improveFrom} ${hasError ? s.error : ''}`}>\r\n            <textarea {...input} {...restProps}/>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.improveFrom} ${hasError ? s.error : ''}`}>\r\n            <input {...input} {...restProps}/>\r\n            <div>\r\n                {hasError && <span>{meta.error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Post} from './Post/Post';\nimport s from './MyPosts.module.css';\nimport {MapStateAndDispatchPropsType} from './MyPostsContainer';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../commonComponents/ImprovisedForm/ImprovisedForm\";\n\nexport function MyPosts(props: MapStateAndDispatchPropsType) {\n\n    const onAddPost = (value: FormDataType) => {\n        props.addPost(value.newPostText);\n    };\n\n    const mapProfileData = props.state.postsData.map(p => <Post key={p.id}\n                                                                post={p.post}\n                                                                like={p.like}\n                                                                avatar={p.avatar}/>);\n    return (\n        <div>\n            <div className={s.myPostsBlock}>\n                <h3>My posts</h3>\n                <AddNewPostReduxForm onSubmit={onAddPost}/>\n            </div>\n            <div>\n                {mapProfileData}\n            </div>\n        </div>\n    );\n}\n\ntype FormDataType = {\n    newPostText: string\n}\n\nconst maxLength = maxLengthCreator(5)\n\nfunction AddNewPostForm(props:InjectedFormProps<FormDataType>) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea}\n                   name={'newPostText'}\n                   placeholder={'Enter new post'}\n                   validate={[requiredField, maxLength]}/>\n            <div>\n                <button>Add Post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostReduxForm = reduxForm<FormDataType>({form: 'profileAddNewPostForm'})(AddNewPostForm)\n\n","import React from 'react';\nimport {AllStateType} from '../../../redux/redux-store';\nimport {addPostAC, InitialStateProfileReducerType} from '../../../redux/profileReducer';\nimport {MyPosts} from './MyPosts';\nimport {connect} from 'react-redux';\nimport {Dispatch} from 'redux';\n\ntype MapStateToPropsType = {\n    state: InitialStateProfileReducerType\n}\ntype MapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapDispatchToPropsType\n\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\n    return {\n        state: state.profileReducer\n    };\n};\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostAC(newPostText));\n        }\n    };\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n","import React from 'react';\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\nimport {ProfileType} from '../../redux/profileReducer';\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n}\n\nexport function Profile(props: ProfilePropsType) {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile}\n                         status={props.status}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\n","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from '../../redux/profileReducer';\r\nimport {AllStateType} from '../../redux/redux-store';\r\nimport {RouteComponentProps, withRouter} from 'react-router';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n}\r\nexport type MapStateToPropsForRedirect = {\r\n    auth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapStateToPropsForRedirect & MapDispatchToPropsType\r\n\r\ntype PathParamType = {\r\n    userId: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamType> & MapStateAndDispatchPropsType\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = '13812';\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile}\r\n                        status={this.props.status}\r\n                        updateStatus={this.props.updateStatus}/>;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profileReducer.profile,\r\n        status: state.profileReducer.status\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(\r\n        mapStateToProps,\r\n        {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    //withAuthRedirect\r\n)(ProfileContainer);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport s from './Header.module.css'\nimport {} from '../../redux/authReducer';\n\ntype HeaderType = {\n    login: string | null\n    isAuth: boolean\n    logout: () => void\n}\n\nexport function Header(props: HeaderType) {\n\n        return (\n            <header className={s.header}>\n                <img\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTZzxV0K3qxDgsnn7LxcALK59V99QMj_veKIw&usqp=CAU\"\n                    alt=\"logo\"/>\n                <div className={s.loginBlock}>\n\n                    {props.isAuth ? <div>{props.login} <button onClick={props.logout}>Log out</button></div> : <NavLink to=\"/login\">Login</NavLink>}\n                </div>\n            </header>\n    );\n}\n\n","import React from 'react';\nimport {Header} from './Header';\nimport {connect} from 'react-redux';\nimport {getAuthUserData, logout} from '../../redux/authReducer';\nimport {AllStateType} from '../../redux/redux-store';\n\nclass HeaderContainer extends React.Component<mapStateAndDispatchPropsType> {\n\n    componentDidMount() {\n        this.props.getAuthUserData()\n    }\n\n    render() {\n        return (\n            <Header login={this.props.login} isAuth={this.props.isAuth} logout={this.props.logout}/>\n        );\n    }\n}\n\ntype mapStateToPropsType = {\n    login: string | null\n    isAuth: boolean\n}\ntype mapDispatchToPropsType = {\n    getAuthUserData: () => void\n    logout: () => void\n}\ntype mapStateAndDispatchPropsType = mapStateToPropsType & mapDispatchToPropsType\n\nconst mapStateToProps = (state: AllStateType): mapStateToPropsType => ({\n    login: state.authReducer.login,\n    isAuth: state.authReducer.isAuth\n});\n\nexport default connect(mapStateToProps, {getAuthUserData, logout})(HeaderContainer);\n\n","type MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport function Message(props: MessagePropsType) {\r\n    return (\r\n        <div>{props.message}</div>\r\n    );\r\n}","import {NavLink} from 'react-router-dom';\r\n\r\ntype UserPropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nexport function MessageAuthor(props: UserPropsType) {\r\n    return (\r\n        <div>\r\n            <NavLink to={`/dialogs/1 ${props.id}`}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}","import s from './Dialogs.module.css';\r\nimport {Message} from './Message/Message';\r\nimport {MessageAuthor} from './MessageAuthor/MessageAuthor';\r\nimport React from 'react';\r\nimport {MapStateAndDispatchPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../commonComponents/ImprovisedForm/ImprovisedForm\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\nexport function Dialogs(props: MapStateAndDispatchPropsType) {\r\n\r\n    const mapUsers = props.state.messageAuthor.map(d => <MessageAuthor key={d.id} id={d.id} name={d.name}/>);\r\n    const mapMessages = props.state.messages.map(m => <Message key={m.id} message={m.message}/>);\r\n\r\n    const addNewMessage = (value: FormDataType) => {\r\n        props.sendMessage(value.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {mapUsers}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {mapMessages}\r\n                <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\ntype FormDataType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nfunction AddMessageForm(props: InjectedFormProps<FormDataType>) {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[requiredField, maxLength10]}\r\n                       name={'newMessageText'}\r\n                       placeholder={'Enter your message'}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {addMessageAC, InitialStateDialogsDataType} from '../../redux/dialogsReducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AllStateType} from '../../redux/redux-store';\r\nimport React from 'react';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    state: InitialStateDialogsDataType\r\n}\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageText: string) => void\r\n}\r\nexport type MapStateAndDispatchPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapStateToProps = (state: AllStateType): MapStateToPropsType => {\r\n    return {\r\n        state: state.dialogsReducer,\r\n    };\r\n};\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageText: string) => {\r\n            dispatch(addMessageAC(newMessageText));\r\n        }\r\n    };\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    //withAuthRedirect\r\n)(Dialogs);","import {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Input} from \"../commonComponents/ImprovisedForm/ImprovisedForm\";\r\nimport {requiredField} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {InitialStateAuthReducerType, login} from \"../../redux/authReducer\";\r\nimport {AllStateType} from \"../../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={'email'} name={'email'} component={Input} validate={[requiredField]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={'password'} name={'password'} component={Input} validate={[requiredField]}\r\n                       type={'password'}/>\r\n            </div>\r\n            <div>\r\n                <Field type=\"checkbox\" name={'rememberMe'} component={Input}/> remember me\r\n            </div>\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\n\r\nconst Login = (props: mapDispatchToProps & mapStateToProps) => {\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        const {email, password, rememberMe} = formData\r\n        props.login(email, password, rememberMe)\r\n    }\r\n\r\n    if (props.state.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype mapDispatchToProps = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype mapStateToProps = {\r\n    state: InitialStateAuthReducerType\r\n}\r\n\r\nconst mapStateToProps = (state: AllStateType): mapStateToProps => ({\r\n    state: state.authReducer\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import React from 'react';\nimport './App.css';\nimport {Navbar} from './components/Navbar/Navbar';\nimport {Route} from 'react-router-dom';\nimport UsersContainer from './components/Users/UsersContainer';\nimport ProfileContainer from './components/Profile/ProfileContainer';\nimport HeaderContainer from './components/Header/HeaderContainer';\nimport DialogsContainer from './components/Dialogs/DialogsContainer';\nimport Login from \"./components/Login/Login\";\n\n\nexport function App() {\n    return (\n        <div className='app-wrapper'>\n            <HeaderContainer/>\n            <Navbar/>\n            <div className='app-wrapper-content'>\n                <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\n                <Route exact path='/dialogs' render={() => <DialogsContainer/>}/>\n                <Route exact path='/users' render={() => <UsersContainer/>}/>\n                <Route exact path='/login' render={() => <Login/>}/>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './index.css';\nimport {store} from './redux/redux-store';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport {BrowserRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n\n\n\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"improveFrom\":\"ImprovisedForm_improveFrom__2Hqui\",\"error\":\"ImprovisedForm_error__3US0g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__37q0Q\",\"dialogItem\":\"Dialogs_dialogItem__NZ7Pt\",\"messages\":\"Dialogs_messages__3ycVE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"Post_postBlock__1xWaO\",\"avatar\":\"Post_avatar__-aGAN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3IvU-\",\"loginBlock\":\"Header_loginBlock__1N2T0\"};"],"sourceRoot":""}